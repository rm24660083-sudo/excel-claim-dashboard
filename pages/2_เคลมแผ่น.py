import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import re

st.title("üìë ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô")

# -----------------------------
# Utility Functions
# -----------------------------
def map_root_cause(defect_text):
    if not defect_text or pd.isna(defect_text):
        return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    if "‡∏¢‡∏±‡∏ö" in str(defect_text):
        return "Tension/Handling"
    return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

def advise_for(defect):
    if "‡∏¢‡∏±‡∏ö" in str(defect):
        return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö"
    return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï"

# -----------------------------
# Upload File
# -----------------------------
uploaded_file = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Rename columns
    rename_map_sheet = {
        "SUPPLIER": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á": "Date",
        "MONTH": "Month",
        "QUARTER": "Quarter",
        "YEAR": "Year"
    }
    df = df.rename(columns={c: rename_map_sheet.get(c, c) for c in df.columns})

    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)
        df["MonthKey"] = df["Date"].dt.strftime("%Y-%m")
        df["Month"] = df["Date"].dt.month
        df["Quarter"] = df["Date"].dt.quarter
    elif "Month" in df.columns and "Year" in df.columns:
        df["MonthKey"] = df["Year"].astype(str) + "-" + df["Month"].astype(str).str.zfill(2)

    df["RootCause"] = df["Defect"].apply(map_root_cause)
    df["Advice"] = df["Defect"].apply(advise_for)

    # 1) ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™", len(df))
    col2.metric("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå", df["SUP"].nunique())
    col3.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", df["Defect"].nunique())

    # 2) ‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/Quarter
    st.subheader("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/Quarter")
    monthly_summary = df.groupby(["MonthKey", "SUP", "Defect"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
    st.dataframe(monthly_summary, hide_index=True)

    # 3) ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
    st.subheader("üìã ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏")
    defect_grade = df.groupby(["Defect", "Grade", "SUP"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
    st.dataframe(defect_grade, hide_index=True)

        # -----------------------------
    # üß© ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)
    # -----------------------------
    st.subheader("üß© ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)")

    defect_count = (
        df.groupby("Defect")
          .size()
          .reset_index(name="Count")
          .sort_values("Count", ascending=False)
          .head(12)
    )

    fig_pie = px.pie(
        defect_count,
        names="Defect",
        values="Count",
        title="‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)",
        hole=0.3  # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô donut chart
    )

    fig_pie.update_traces(textposition="inside", textinfo="percent+label")
    st.plotly_chart(fig_pie, use_container_width=True)

    # 4) ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP")

    monthly_sup = (
        df.groupby(["MonthKey", "SUP"])
          .size()
          .reset_index(name="Count")
          .sort_values("MonthKey")
    )

    fig_monthly = px.line(
        monthly_sup,
        x="MonthKey",
        y="Count",
        color="SUP",
        markers=True,
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP"
    )

    fig_monthly.update_layout(
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™",
        legend_title="SUP",
        height=500
    )

    st.plotly_chart(fig_monthly, use_container_width=True)

    # -----------------------------
    # ü§ñ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô
    # -----------------------------
    st.subheader("ü§ñ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô")

    # 1) Watchlist SUP + Defect
    sup_defect = (
        df.groupby(["SUP", "Defect"])
          .size()
          .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
          .sort_values("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™", ascending=False)
    )

    threshold = sup_defect["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™"].mean()
    watchlist = sup_defect[sup_defect["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™"] > threshold]

    st.markdown("**üìå SUP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á (‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢):**")
    st.dataframe(watchlist, hide_index=True)

    # 2) ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
    st.subheader("üí° ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£")
    for _, row in watchlist.iterrows():
        sup = row["SUP"]
        defect = row["Defect"]
        count = row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™"]

        if "‡∏¢‡∏±‡∏ö" in defect:
            advice = (
                f"SUP {sup} ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Äú{defect}‚Äù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á "
                "‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á "
                "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô "
                "‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"
            )
        else:
            advice = (
                f"SUP {sup} ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Äú{defect}‚Äù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á "
                "‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏ß‡∏£‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç "
                "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° "
                "‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏¢‡∏≤‡∏ß"
            )

        st.success(advice)

    # 3) Forecasting ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

    monthly = (
        df.groupby(["MonthKey", "SUP", "Defect"])
          .size()
          .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
    )

    forecast_results = []
    for (sup, defect), group in monthly.groupby(["SUP", "Defect"]):
        ts = group.set_index("MonthKey")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™"]
        ts.index = pd.to_datetime(ts.index + "-01", errors="coerce")
        ts = ts.sort_index().asfreq("MS").fillna(0)

        if len(ts) >= 3:
            from statsmodels.tsa.holtwinters import ExponentialSmoothing
            model = ExponentialSmoothing(ts, trend="add", seasonal=None)
            fit = model.fit()
            pred = fit.forecast(1)
            forecast_results.append([sup, defect, int(pred.values[0])])

    forecast_df = pd.DataFrame(forecast_results, columns=["SUP", "Defect", "‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"])
    st.dataframe(forecast_df, hide_index=True)

    if not forecast_df.empty:
        fig_forecast = px.bar(
            forecast_df,
            x="SUP",
            y="‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
            color="Defect",
            title="üìä ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ SUP + Defect ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
        )
        st.plotly_chart(fig_forecast, use_container_width=True)
