import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import re

st.title("üìë ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏Ñ‡∏•‡∏°‡∏°‡πâ‡∏ß‡∏ô")

# -----------------------------
# Utility Functions
# -----------------------------
root_cause_rules = [
    (r"carl?ender|‡∏Ñ‡∏≤‡πÄ‡∏•‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏Ñ‡∏≤‡∏£‡πå‡πÄ‡∏•‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏à‡∏∏‡∏î‡∏î‡∏≥", "‡∏£‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡∏£‡∏µ‡∏î/‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤"),
    (r"‡∏¢‡∏±‡∏ö|‡∏£‡∏≠‡∏¢‡∏¢‡∏±‡∏ö|‡∏°‡πâ‡∏ß‡∏ô‡∏´‡∏¢‡πà‡∏≠‡∏ô", "Tension/‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠-‡∏Ç‡∏ô‡∏™‡πà‡∏á"),
    (r"‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô|‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô", "‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏î/‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á"),
]

def map_root_cause(defect_text):
    if not defect_text or pd.isna(defect_text):
        return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    for pattern, cause in root_cause_rules:
        if re.search(pattern, str(defect_text), flags=re.IGNORECASE):
            return cause
    return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

def advise_for(defect):
    t = str(defect)
    if re.search(r"‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô|‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô", t, re.I):
        return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slitting/‡πÉ‡∏ö‡∏°‡∏µ‡∏î ‡πÅ‡∏•‡∏∞ tension"
    return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï"

# -----------------------------
# Upload File
# -----------------------------
uploaded_file = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡πÄ‡∏Ñ‡∏•‡∏°‡∏°‡πâ‡∏ß‡∏ô)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Rename columns
    rename_map = {
        "SUP": "SUP", "Supplier": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect", "‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade", "Grade": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å": "Date", "Date": "Date"
    }
    df = df.rename(columns={c: rename_map.get(c, c) for c in df.columns})

    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)
        df["MonthKey"] = df["Date"].dt.strftime("%Y-%m")
        df["Month"] = df["Date"].dt.month
        df["Quarter"] = df["Date"].dt.quarter

    df["RootCause"] = df["Defect"].apply(map_root_cause)
    df["Advice"] = df["Defect"].apply(advise_for)

    # KPI
    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", len(df))
    col2.metric("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå", df["SUP"].nunique())
    col3.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", df["Defect"].nunique())

    # ‡∏Å‡∏£‡∏≤‡∏ü SUP
    st.subheader("üè≠ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö SUP (Top 12)")
    sup_count = df.groupby("SUP").size().reset_index(name="Count").sort_values("Count", ascending=False).head(12)
    fig1 = px.bar(sup_count, x="SUP", y="Count", text="Count")
    st.plotly_chart(fig1, use_container_width=True)

    # ‡∏Å‡∏£‡∏≤‡∏ü Defect
    st.subheader("üß© ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)")
    defect_count = df.groupby("Defect").size().reset_index(name="Count").sort_values("Count", ascending=False).head(12)
    fig2 = px.pie(defect_count, names="Defect", values="Count")
    st.plotly_chart(fig2, use_container_width=True)

    # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP")
    monthly_sup = df.groupby(["MonthKey", "SUP"]).size().reset_index(name="Count")
    fig3 = px.line(monthly_sup, x="MonthKey", y="Count", color="SUP", markers=True)
    st.plotly_chart(fig3, use_container_width=True)

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    st.subheader("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    advisor_unique = df[["SUP", "Defect", "Advice"]].drop_duplicates()
    st.dataframe(advisor_unique, hide_index=True)

    # -----------------------------
    # üîπ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå SUP + ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏° + Defect ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/Quarter
    # -----------------------------
    st.subheader("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå SUP + ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏° + Defect ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/Quarter")

    # ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    monthly_sup_grade = (
        df.groupby(["MonthKey", "SUP", "Grade", "Defect"])
          .size()
          .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
          .sort_values(["MonthKey", "SUP", "Grade", "Defect"])
    )
    st.markdown("**‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:**")
    st.dataframe(monthly_sup_grade, hide_index=True)

    # ‡∏£‡∏≤‡∏¢ Quarter
    quarterly_sup_grade = (
        df.groupby(["Quarter", "SUP", "Grade", "Defect"])
          .size()
          .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
          .sort_values(["Quarter", "SUP", "Grade", "Defect"])
    )
    st.markdown("**‡∏£‡∏≤‡∏¢ Quarter:**")
    st.dataframe(quarterly_sup_grade, hide_index=True)

    # -----------------------------
    # üîπ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ä‡πà‡∏ß‡∏¢‡∏°‡∏≠‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
    # -----------------------------
    st.subheader("üìà ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP ‡πÅ‡∏•‡∏∞ Grade")

    fig_sup_grade = px.bar(
        quarterly_sup_grade,
        x="SUP",
        y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™",
        color="Grade",
        facet_col="Quarter",
        text="Defect",
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ï‡πà‡∏≠ SUP + Grade (‡∏£‡∏≤‡∏¢ Quarter)"
    )
    st.plotly_chart(fig_sup_grade, use_container_width=True)

import pandas as pd
import plotly.express as px
import streamlit as st
from statsmodels.tsa.holtwinters import ExponentialSmoothing

st.subheader("ü§ñ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å")

# -----------------------------
# 1) Watchlist SUP + Defect
# -----------------------------
sup_defect = (
    df.groupby(["SUP", "Defect"])
      .size()
      .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
      .sort_values("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™", ascending=False)
)

threshold = sup_defect["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™"].mean()
watchlist = sup_defect[sup_defect["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™"] > threshold]

st.markdown("**üìå SUP ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á (‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢):**")
st.dataframe(watchlist, hide_index=True)

st.subheader("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")

for _, row in watchlist.iterrows():
    sup = row["SUP"]
    defect = row["Defect"]
    count = row["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™"]

    if "‡∏Ç‡∏≠‡∏ö" in defect:
        advice = (
            f"‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ‡∏û‡∏ö‡∏ß‡πà‡∏≤ SUP {sup} "
            f"‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Äú{defect}‚Äù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á "
            "‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ "
            "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á "
            "‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏£‡∏µ‡∏î‡πÅ‡∏ú‡πà‡∏ô"
        )
    elif "‡∏Ñ‡∏£‡∏≤‡∏ö" in defect:
        advice = (
            f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤ SUP {sup} ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Äú{defect}‚Äù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á "
            "‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡πà‡∏≠‡∏•‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå "
            "‡∏Ñ‡∏ß‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡πà‡∏≠‡∏•‡∏∑‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£ "
            "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
        )
    else:
        advice = (
            f"SUP {sup} ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Äú{defect}‚Äù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á "
            "‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° "
            "‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö "
            "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï"
        )

    st.write(advice)

# -----------------------------
# 3) Forecasting (‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
# -----------------------------
st.subheader("üìà ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
monthly = (
    df.groupby(["MonthKey", "SUP", "Defect"])
      .size()
      .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
)

forecast_results = []

for (sup, defect), group in monthly.groupby(["SUP", "Defect"]):
    ts = group.set_index("MonthKey")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™"].asfreq("MS")  # MS = Month Start
    ts = ts.fillna(0)

    if len(ts) >= 3:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        model = ExponentialSmoothing(ts, trend="add", seasonal=None)
        fit = model.fit()
        pred = fit.forecast(1)  # ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        forecast_results.append([sup, defect, int(pred.values[0])])

forecast_df = pd.DataFrame(forecast_results, columns=["SUP", "Defect", "‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤"])

st.dataframe(forecast_df, hide_index=True)

# ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏ß‡∏°
if not forecast_df.empty:
    fig = px.bar(
        forecast_df,
        x="SUP",
        y="‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤",
        color="Defect",
        title="üìä ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ SUP + Defect ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
    )
    st.plotly_chart(fig, use_container_width=True)
