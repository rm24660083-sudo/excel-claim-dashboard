import streamlit as st
import pandas as pd
import plotly.express as px
import re
import numpy as np
import html

st.set_page_config(page_title="üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô", layout="wide")
st.title("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô")

# -----------------------------
# Utility functions
# -----------------------------
def median(arr):
    if len(arr) == 0:
        return 0
    return float(np.median(arr))

def escape_html(s):
    return html.escape(str(s))

# Root cause mapping
root_cause_rules = [
    (r"carl?ender|‡∏Ñ‡∏≤‡πÄ‡∏•‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏Ñ‡∏≤‡∏£‡πå‡πÄ‡∏•‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏à‡∏∏‡∏î‡∏î‡∏≥", "‡∏£‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡∏£‡∏µ‡∏î/‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤ (Calender mark / Black spots)"),
    (r"‡∏¢‡∏±‡∏ö|‡∏£‡∏≠‡∏¢‡∏¢‡∏±‡∏ö|‡∏¢‡∏±‡∏ö‡πÉ‡∏ô‡∏°‡πâ‡∏ß‡∏ô|‡∏°‡πâ‡∏ß‡∏ô‡∏´‡∏¢‡πà‡∏≠‡∏ô", "Tension/‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠-‡∏Ç‡∏ô‡∏™‡πà‡∏á"),
    (r"‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô|‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô", "‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏î/‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á"),
    (r"‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏™‡∏Å‡∏õ‡∏£‡∏Å|‡∏´‡∏±‡∏ß‡∏°‡πâ‡∏ß‡∏ô‡∏™‡∏Å‡∏õ‡∏£‡∏Å|‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏î‡πà‡∏≤‡∏á|‡∏î‡πà‡∏≤‡∏á", "‡∏Å‡∏≤‡∏£‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô/‡∏™‡∏¥‡πà‡∏á‡∏™‡∏Å‡∏õ‡∏£‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
    (r"wax|‡∏Ñ‡∏£‡∏≤‡∏ö", "‡∏Ñ‡∏£‡∏≤‡∏ö WAX/‡πÄ‡∏Ñ‡∏°‡∏µ‡∏Ñ‡πâ‡∏≤‡∏á"),
    (r"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô|Cobb", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô/‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"),
    (r"Bursting", "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ï‡πà‡∏≥ (Bursting)"),
    (r"‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏π‡∏á|‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡πà‡∏≥", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (Basis weight)"),
    (r"‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á.*(‡∏ï‡πà‡∏≥|‡∏´‡∏î|‡πÄ‡∏Å‡∏¥‡∏ô|‡∏™‡∏π‡∏á)|‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (Slitting/Trim control)"),
    (r"‡πÅ‡∏Å‡∏ô‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß|‡∏´‡∏±‡∏ß‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ï‡∏Å", "‡πÅ‡∏Å‡∏ô/‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πá‡∏Ñ/‡∏Ç‡∏ô‡∏™‡πà‡∏á"),
    (r"‡∏£‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å|‡πÄ‡∏®‡∏©‡∏Å‡∏£‡∏µ‡∏î|‡∏£‡∏≠‡∏¢‡∏ó‡∏±‡∏ö‡∏¢‡∏≤‡∏á", "Handling/‡∏Ç‡∏ô‡∏™‡πà‡∏á/‡πÉ‡∏ö‡∏°‡∏µ‡∏î"),
    (r"‡∏™‡∏µ‡∏ï‡∏Å", "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö/‡∏´‡∏°‡∏∂‡∏Å/‡πÇ‡∏Ñ‡πâ‡∏ó‡∏ï‡∏¥‡πâ‡∏á (Color off-spec)")
]

def map_root_cause(defect_text):
    if not defect_text or pd.isna(defect_text):
        return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    for pattern, cause in root_cause_rules:
        if re.search(pattern, str(defect_text), flags=re.IGNORECASE):
            return cause
    return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

def advise_for(defect):
    t = str(defect)
    if re.search(r"‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô|‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô|‡πÄ‡∏®‡∏©‡∏Å‡∏£‡∏µ‡∏î|‡∏£‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å", t, re.I):
        return "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô slitting/‡πÉ‡∏ö‡∏°‡∏µ‡∏î/‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡∏î, tension ‡∏Å‡∏£‡∏≠, handling ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å"
    if re.search(r"carl?ender|‡∏à‡∏∏‡∏î‡∏î‡∏≥|‡∏î‡πà‡∏≤‡∏á|‡∏™‡∏Å‡∏õ‡∏£‡∏Å", t, re.I):
        return "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á/‡πÑ‡∏•‡∏ô‡πå, ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°, ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≠‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
    if re.search(r"‡πÅ‡∏Å‡∏£‡∏°|‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á", t, re.I):
        return "‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á/Trim, ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô sampling ‡πÅ‡∏•‡∏∞ Alarm limits"
    if re.search(r"Bursting", t, re.I):
        return "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏™‡∏π‡∏ï‡∏£/‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå/‡πÄ‡∏Ñ‡∏°‡∏µ, ‡∏ï‡∏£‡∏ß‡∏à Lab control ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"
    if re.search(r"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô|Cobb", t, re.I):
        return "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° RH ‡πÇ‡∏Å‡∏î‡∏±‡∏á, ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡∏µ‡∏•‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πâ‡∏ô, ‡∏ï‡∏£‡∏ß‡∏à oven/profile ‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡πÑ‡∏•‡∏ô‡πå"
    if re.search(r"‡πÅ‡∏Å‡∏ô‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß|‡∏°‡πâ‡∏ß‡∏ô‡∏´‡∏¢‡πà‡∏≠‡∏ô|‡∏´‡∏±‡∏ß‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ï‡∏Å", t, re.I):
        return "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏Å‡∏ô, core plug, tension cut-over, ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏û‡πá‡∏Ñ/‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏°‡∏∏‡∏°"
    if re.search(r"‡∏™‡∏µ‡∏ï‡∏Å", t, re.I):
        return "‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏ó‡∏ï‡∏¥‡πâ‡∏á/‡∏´‡∏°‡∏∂‡∏Å, ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏≠‡∏ö‡πÅ‡∏´‡πâ‡∏á"
    return "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ú‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏∏‡∏î‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡πÉ‡∏ô‡πÑ‡∏•‡∏ô‡πå + sampling ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"

# -----------------------------
# File upload
# -----------------------------
uploaded_file = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Rename columns
    rename_map = {
        "SUP": "SUP",
        "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå": "SUP",
        "Supplier": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect",
        "‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á": "Defect",
        "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade",
        "Grade": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å": "Date",
        "Date": "Date",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": "Date",
        "Lot": "Lot",
        "Code": "Code",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á": "ShipDate"
    }
    df = df.rename(columns={c: rename_map.get(c, c) for c in df.columns})

    # Date handling
    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)
        df["MonthKey"] = df["Date"].dt.strftime("%Y-%m")
        df["Month"] = df["Date"].dt.month
        df["Quarter"] = df["Date"].dt.quarter
    else:
        df["MonthKey"] = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

    # Add RootCause + Advice
    df["RootCause"] = df["Defect"].apply(map_root_cause)
    df["Advice"] = df["Defect"].apply(advise_for)

    # -----------------------------
    # KPI Cards
    # -----------------------------
    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", len(df))
    col2.metric("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", df["SUP"].nunique())
    col3.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö", df["Defect"].nunique())

    # -----------------------------
    # Supplier Bar
    # -----------------------------
    st.subheader("üè≠ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö SUP ‡πÇ‡∏î‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)")
    sup_count = df.groupby("SUP").size().reset_index(name="Count").sort_values("Count", ascending=False).head(12)
    fig1 = px.bar(sup_count, x="SUP", y="Count", text="Count", title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô defect ‡∏ï‡πà‡∏≠ SUP")
    st.plotly_chart(fig1, use_container_width=True)

    # -----------------------------
    # Defect Pie
    # -----------------------------
    st.subheader("üß© ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)")
    defect_count = df.groupby("Defect").size().reset_index(name="Count").sort_values("Count", ascending=False).head(12)
    fig2 = px.pie(defect_count, names="Defect", values="Count", title="Defect Breakdown")
    st.plotly_chart(fig2, use_container_width=True)

    # -----------------------------
    # Monthly Trend
    # -----------------------------
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™)")
    monthly = df.groupby("MonthKey").size().reset_index(name="Count").sort_values("MonthKey")
    fig3 = px.line(monthly, x="MonthKey", y="Count", markers=True, title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô defect ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
    st.plotly_chart(fig3, use_container_width=True)

    # -----------------------------
    # Top Defect by Supplier
    # -----------------------------
    st.subheader("üî• Top Defect ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ SUP (Top 8)")
    sup_summary = df.groupby(["SUP","Defect"]).size().reset_index(name="Count")
    top_sups = sup_summary.groupby("SUP")["Count"].sum().sort_values(ascending=False).head(8).index
    df_top = sup_summary[sup_summary["SUP"].isin(top_sups)]
    fig4 = px.bar(df_top, x="SUP", y="Count", color="Defect", barmode="group", title="Top 8 SUP ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πà‡∏ô")
    st.plotly_chart(fig4, use_container_width=True)

    # -----------------------------
# Summary Table
# -----------------------------
st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° SUP")

summary = []
for sup, g in df.groupby("SUP"):
    total = len(g)
    # Top 3 ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
    top3 = g["Defect"].value_counts().head(3).to_dict()
    top3_str = ", ".join([f"{k} ({v})" for k, v in top3.items()])
    # ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    latest_month = g["MonthKey"].max()
    latest_count = len(g[g["MonthKey"] == latest_month])
    summary.append({
        "SUP": sup,
        "‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏™": total,
        "Top 3 ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£": top3_str,
        "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": f"{latest_month}: {latest_count}" if latest_month else "-"
    })

summary_df = pd.DataFrame(summary).sort_values("‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏™", ascending=False)
st.dataframe(summary_df, hide_index=True)
