import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import re
import html

# -----------------------------
# Config
# -----------------------------
st.set_page_config(page_title="üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô", layout="wide")
# -----------------------------
# Logo + Credit (‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ Title)
# -----------------------------
import streamlit as st

st.markdown(
    """
    <div style="text-align:left;">
        <img src="Logo.png" width="120">
        <div style="font-size:16px; font-weight:bold; margin-top:5px;">
            Powered by <span style="color:#d62728;">The Beyonder RM</span>
        </div>
    </div>
    """,
    unsafe_allow_html=True
)

st.title("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°‡∏°‡πâ‡∏ß‡∏ô")
# -----------------------------
# Utility Functions (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 7)
# -----------------------------
def median(arr):
    if len(arr) == 0:
        return 0
    return float(np.median(arr))

def escape_html(s):
    return html.escape(str(s))

root_cause_rules = [
    (r"carl?ender|‡∏Ñ‡∏≤‡πÄ‡∏•‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏Ñ‡∏≤‡∏£‡πå‡πÄ‡∏•‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏à‡∏∏‡∏î‡∏î‡∏≥", "‡∏£‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡∏£‡∏µ‡∏î/‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤ (Calender mark / Black spots)"),
    (r"‡∏¢‡∏±‡∏ö|‡∏£‡∏≠‡∏¢‡∏¢‡∏±‡∏ö|‡∏¢‡∏±‡∏ö‡πÉ‡∏ô‡∏°‡πâ‡∏ß‡∏ô|‡∏°‡πâ‡∏ß‡∏ô‡∏´‡∏¢‡πà‡∏≠‡∏ô", "Tension/‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠-‡∏Ç‡∏ô‡∏™‡πà‡∏á"),
    (r"‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô|‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô", "‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏î/‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á"),
    (r"‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏™‡∏Å‡∏õ‡∏£‡∏Å|‡∏´‡∏±‡∏ß‡∏°‡πâ‡∏ß‡∏ô‡∏™‡∏Å‡∏õ‡∏£‡∏Å|‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏î‡πà‡∏≤‡∏á|‡∏î‡πà‡∏≤‡∏á", "‡∏Å‡∏≤‡∏£‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô/‡∏™‡∏¥‡πà‡∏á‡∏™‡∏Å‡∏õ‡∏£‡∏Å‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"),
    (r"wax|‡∏Ñ‡∏£‡∏≤‡∏ö", "‡∏Ñ‡∏£‡∏≤‡∏ö WAX/‡πÄ‡∏Ñ‡∏°‡∏µ‡∏Ñ‡πâ‡∏≤‡∏á"),
    (r"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô|Cobb", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô/‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"),
    (r"Bursting", "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏ï‡πà‡∏≥ (Bursting)"),
    (r"‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏π‡∏á|‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡πà‡∏≥", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (Basis weight)"),
    (r"‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á.*(‡∏ï‡πà‡∏≥|‡∏´‡∏î|‡πÄ‡∏Å‡∏¥‡∏ô|‡∏™‡∏π‡∏á)|‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (Slitting/Trim control)"),
    (r"‡πÅ‡∏Å‡∏ô‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß|‡∏´‡∏±‡∏ß‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ï‡∏Å", "‡πÅ‡∏Å‡∏ô/‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πá‡∏Ñ/‡∏Ç‡∏ô‡∏™‡πà‡∏á"),
    (r"‡∏£‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å|‡πÄ‡∏®‡∏©‡∏Å‡∏£‡∏µ‡∏î|‡∏£‡∏≠‡∏¢‡∏ó‡∏±‡∏ö‡∏¢‡∏≤‡∏á", "Handling/‡∏Ç‡∏ô‡∏™‡πà‡∏á/‡πÉ‡∏ö‡∏°‡∏µ‡∏î"),
    (r"‡∏™‡∏µ‡∏ï‡∏Å", "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö/‡∏´‡∏°‡∏∂‡∏Å/‡πÇ‡∏Ñ‡πâ‡∏ó‡∏ï‡∏¥‡πâ‡∏á (Color off-spec)")
]

def map_root_cause(defect_text):
    if not defect_text or pd.isna(defect_text):
        return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    for pattern, cause in root_cause_rules:
        if re.search(pattern, str(defect_text), flags=re.IGNORECASE):
            return cause
    return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

def advise_for(defect):
    t = str(defect)
    if re.search(r"‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô|‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô|‡πÄ‡∏®‡∏©‡∏Å‡∏£‡∏µ‡∏î|‡∏£‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å", t, re.I):
        return "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô slitting/‡πÉ‡∏ö‡∏°‡∏µ‡∏î/‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡∏î, tension ‡∏Å‡∏£‡∏≠, handling ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å"
    if re.search(r"carl?ender|‡∏à‡∏∏‡∏î‡∏î‡∏≥|‡∏î‡πà‡∏≤‡∏á|‡∏™‡∏Å‡∏õ‡∏£‡∏Å", t, re.I):
        return "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á/‡πÑ‡∏•‡∏ô‡πå, ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°, ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≠‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
    if re.search(r"‡πÅ‡∏Å‡∏£‡∏°|‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á", t, re.I):
        return "‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á/Trim, ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏ú‡∏ô sampling ‡πÅ‡∏•‡∏∞ Alarm limits"
    if re.search(r"Bursting", t, re.I):
        return "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏™‡∏π‡∏ï‡∏£/‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå/‡πÄ‡∏Ñ‡∏°‡∏µ, ‡∏ï‡∏£‡∏ß‡∏à Lab control ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö"
    if re.search(r"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô|Cobb", t, re.I):
        return "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° RH ‡πÇ‡∏Å‡∏î‡∏±‡∏á, ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡∏µ‡∏•‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πâ‡∏ô, ‡∏ï‡∏£‡∏ß‡∏à oven/profile ‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡πÑ‡∏•‡∏ô‡πå"
    if re.search(r"‡πÅ‡∏Å‡∏ô‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß|‡∏°‡πâ‡∏ß‡∏ô‡∏´‡∏¢‡πà‡∏≠‡∏ô|‡∏´‡∏±‡∏ß‡∏°‡πâ‡∏ß‡∏ô‡πÅ‡∏ï‡∏Å", t, re.I):
        return "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏Å‡∏ô, core plug, tension cut-over, ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏û‡πá‡∏Ñ/‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏°‡∏∏‡∏°"
    if re.search(r"‡∏™‡∏µ‡∏ï‡∏Å", t, re.I):
        return "‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏ó‡∏ï‡∏¥‡πâ‡∏á/‡∏´‡∏°‡∏∂‡∏Å, ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏≠‡∏ö‡πÅ‡∏´‡πâ‡∏á"
    return "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ú‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏∏‡∏î‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡πÉ‡∏ô‡πÑ‡∏•‡∏ô‡πå + sampling ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤"

# -----------------------------
# Upload file (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1)
# -----------------------------
uploaded_file = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Rename columns
    rename_map = {
        "SUP": "SUP", "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå": "SUP", "Supplier": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect", "‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á": "Defect", "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade", "Grade": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å": "Date", "Date": "Date", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": "Date",
        "Lot": "Lot", "Code": "Code", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á": "ShipDate"
    }
    df = df.rename(columns={c: rename_map.get(c, c) for c in df.columns})

    # Date handling
    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)
        df["MonthKey"] = df["Date"].dt.strftime("%Y-%m")
        df["Month"] = df["Date"].dt.month
        df["Quarter"] = df["Date"].dt.quarter
    else:
        df["MonthKey"] = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

    # Add RootCause + Advice
    if "Defect" in df.columns:
        df["RootCause"] = df["Defect"].apply(map_root_cause)
        df["Advice"] = df["Defect"].apply(advise_for)

    # -----------------------------
    # KPI Cards (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1)
    # -----------------------------
    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", len(df))
    col2.metric("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", df["SUP"].nunique() if "SUP" in df.columns else 0)
    col3.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö", df["Defect"].nunique() if "Defect" in df.columns else 0)

        # -----------------------------
    # Supplier Bar
    # -----------------------------
    st.subheader("üè≠ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö SUP ‡πÇ‡∏î‡∏¢‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)")
    if "SUP" in df.columns:
        sup_count = (
            df.groupby("SUP")
              .size()
              .reset_index(name="Count")
              .sort_values("Count", ascending=False)
              .head(12)
        )
        fig1 = px.bar(
            sup_count,
            x="SUP",
            y="Count",
            text="Count",
            title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô defect ‡∏ï‡πà‡∏≠ SUP"
        )
        st.plotly_chart(fig1, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå SUP ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")

    # -----------------------------
    # Defect Pie
    # -----------------------------
    st.subheader("üß© ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)")
    if "Defect" in df.columns:
        defect_count = (
            df.groupby("Defect")
              .size()
              .reset_index(name="Count")
              .sort_values("Count", ascending=False)
              .head(12)
        )
        fig2 = px.pie(
            defect_count,
            names="Defect",
            values="Count",
            title="Defect Breakdown"
        )
        st.plotly_chart(fig2, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Defect ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")


    # -----------------------------
    # Monthly Trend
    # -----------------------------
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™)")
    if "MonthKey" in df.columns:
        monthly = (
            df.groupby("MonthKey")
              .size()
              .reset_index(name="Count")
              .sort_values("MonthKey")
        )
        fig3 = px.line(
            monthly,
            x="MonthKey",
            y="Count",
            markers=True,
            title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô defect ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
        )
        st.plotly_chart(fig3, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MonthKey")

    # -----------------------------
    # Top Defect by Supplier (go.Bar ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ó‡πà‡∏á‡∏´‡∏ô‡∏≤)
    # -----------------------------
    import plotly.graph_objects as go

    st.subheader("üî• ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ SUP (Top 8)")
    if "SUP" in df.columns and "Defect" in df.columns:
        sup_summary = df.groupby(["SUP","Defect"]).size().reset_index(name="Count")
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å SUP ‡∏ó‡∏µ‡πà‡∏°‡∏µ defect ‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 8 ‡∏£‡∏≤‡∏¢
        top_sups = (
            sup_summary.groupby("SUP")["Count"]
            .sum()
            .sort_values(ascending=False)
            .head(8)
            .index
        )
        df_top = sup_summary[sup_summary["SUP"].isin(top_sups)]

        fig4 = go.Figure()

        # ‡∏ß‡∏≤‡∏î‡πÅ‡∏ó‡πà‡∏á defect ‡πÅ‡∏¢‡∏Å‡∏™‡∏µ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πà‡∏á
        for defect in df_top["Defect"].unique():
            sub = df_top[df_top["Defect"] == defect]
            fig4.add_trace(go.Bar(
                x=sub["SUP"],
                y=sub["Count"],
                name=defect,
                width=0.1   # üëà ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (0‚Äì1) ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏ç‡πà = ‡πÅ‡∏ó‡πà‡∏á‡∏´‡∏ô‡∏≤ (0.8 ~ ‡∏´‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô 2 ‡πÄ‡∏ó‡πà‡∏≤)
            ))

        fig4.update_layout(
            barmode="group",
            bargap=0.05,       # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° SUP
            bargroupgap=0.02,  # ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            height=700,
            title="Top 8 SUP ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πà‡∏ô"
        )

        st.plotly_chart(fig4, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå SUP ‡∏´‡∏£‡∏∑‡∏≠ Defect")

    # -----------------------------
    # Summary Table
    # -----------------------------
    st.subheader("üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° SUP")

    if "SUP" in df.columns and "Defect" in df.columns:
        summary = []
        for sup, g in df.groupby("SUP"):
            total = len(g)
            # Top 3 ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
            top3 = g["Defect"].value_counts().head(3).to_dict()
            top3_str = ", ".join([f"{k} ({v})" for k, v in top3.items()])
            # ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest_month = g["MonthKey"].max() if "MonthKey" in g.columns else None
            latest_count = len(g[g["MonthKey"] == latest_month]) if latest_month else 0
            summary.append({
                "SUP": sup,
                "‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏™": total,
                "Top 3 ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£": top3_str,
                "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": f"{latest_month}: {latest_count}" if latest_month else "-"
            })

        summary_df = pd.DataFrame(summary).sort_values("‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏™", ascending=False)
        st.dataframe(summary_df, hide_index=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå SUP ‡∏´‡∏£‡∏∑‡∏≠ Defect")

    # -----------------------------
    # Watchlist SUP
    # -----------------------------
    st.subheader("‚ö†Ô∏è Watchlist SUP ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á")

    if "SUP" in df.columns and "MonthKey" in df.columns:
        sup_stats = []
        for sup, g in df.groupby("SUP"):
            total = len(g)
            # 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            last3_keys = sorted(g["MonthKey"].dropna().unique())[-3:]
            last3_sum = len(g[g["MonthKey"].isin(last3_keys)])
            top_def = g["Defect"].value_counts().idxmax() if not g["Defect"].empty else "-"
            sup_stats.append({
                "SUP": sup,
                "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ": total,
                "3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î": last3_sum,
                "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡πà‡∏ô": top_def
            })

        watchlist = pd.DataFrame(sup_stats)
        median_val = watchlist["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ"].median()
        # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ > median ‡∏´‡∏£‡∏∑‡∏≠ 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î >= 1/4 ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        watchlist = watchlist[
            (watchlist["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ"] > median_val) |
            (watchlist["3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"] >= watchlist["‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ"]/4)
        ]
        watchlist = watchlist.sort_values("3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", ascending=False).head(10)
        st.dataframe(watchlist, hide_index=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå SUP ‡∏´‡∏£‡∏∑‡∏≠ MonthKey")


        # -----------------------------
    # Month 10 Watchouts
    # -----------------------------
    st.subheader("üìå ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£/‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 10")

    if "Month" in df.columns and "Defect" in df.columns:
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        recent = df[df["Month"] >= (df["Month"].max() - 2)]
        by_def_recent = recent["Defect"].value_counts().head(8)

        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° defect ‡∏ï‡∏≤‡∏° root cause
        grouped = {}
        for defect in by_def_recent.index:
            cause = map_root_cause(defect)
            grouped.setdefault(cause, []).append(defect)

        for cause, defs in grouped.items():
            st.write(f"**{cause}** ‚Äî ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏ö: {', '.join(defs[:4])}")

        # Extra tips (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô HTML ‡πÄ‡∏î‡∏¥‡∏°)
        extra = [
            "‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô/‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô/‡πÄ‡∏®‡∏©‡∏Å‡∏£‡∏µ‡∏î: ‡∏ó‡∏ß‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏°‡∏µ‡∏î-‡πÅ‡∏£‡∏á‡∏Å‡∏î-‡πÅ‡∏ô‡∏ß Slitting ‡πÅ‡∏•‡∏∞ tension ‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πâ‡∏ô-‡∏ó‡πâ‡∏≤‡∏¢‡∏°‡πâ‡∏ß‡∏ô",
            "Calender mark/‡∏à‡∏∏‡∏î‡∏î‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á ‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏¢‡∏∑‡πà‡∏≠/‡∏£‡∏µ‡πÄ‡∏à‡πá‡∏Ñ‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• ‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô/Cobb: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏ö, ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° RH ‡πÇ‡∏Å‡∏î‡∏±‡∏á, ‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏´‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πâ‡∏ô",
            "Bursting: ‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÑ‡∏ü‡πÄ‡∏ö‡∏≠‡∏£‡πå/‡πÄ‡∏Ñ‡∏°‡∏µ, targeting basis weight ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏£‡∏µ‡∏î",
            "‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á/‡πÅ‡∏Å‡∏£‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Trim/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
        ]
        st.markdown("**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:**")
        for tip in extra:
            st.write(f"- {tip}")
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Month ‡∏´‡∏£‡∏∑‡∏≠ Defect")

    # -----------------------------
    # Advisor Column (Unique per SUP + Defect)
    # -----------------------------
    st.subheader("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Advisor)")

    if "SUP" in df.columns and "Defect" in df.columns:
        df["Advice"] = df["Defect"].apply(advise_for)

        # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (SUP + Defect + Advice)
        advisor_unique = df[["SUP","Defect","Advice"]].drop_duplicates()

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        advisor_unique = advisor_unique.sort_values(["SUP","Defect"])

        st.dataframe(advisor_unique, hide_index=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå SUP ‡∏´‡∏£‡∏∑‡∏≠ Defect")

    # -----------------------------
    # Detail Table (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏ã‡πâ‡∏≥)
    # -----------------------------
    st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≤‡∏° SUP")

    if all(col in df.columns for col in ["SUP","Defect","Advice","Grade"]):
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° SUP + Defect + Advice + Grade
        detail = (
            df.groupby(["SUP","Defect","Advice","Grade"])
              .size()
              .reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
              .sort_values(["SUP","Defect"])
        )

        st.dataframe(detail, hide_index=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå SUP / Defect / Advice / Grade")

        # -----------------------------
    # Utility Functions (Python version)
    # -----------------------------
    import numpy as np
    import html

    def median(arr):
        """‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á list/Series"""
        if len(arr) == 0:
            return 0
        return float(np.median(arr))

    def escape_html(s):
        """Escape ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô HTML injection"""
        return html.escape(str(s))




