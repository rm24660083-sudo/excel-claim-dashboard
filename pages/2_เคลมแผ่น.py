import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import re

st.title("üìë ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô")

# -----------------------------
# Utility Functions
# -----------------------------
def map_root_cause(defect_text):
    if not defect_text or pd.isna(defect_text):
        return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    if "‡∏¢‡∏±‡∏ö" in str(defect_text):
        return "Tension/Handling"
    return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

def advise_for(defect):
    if "‡∏¢‡∏±‡∏ö" in str(defect):
        return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö"
    return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï"

# -----------------------------
# Upload File
# -----------------------------
uploaded_file = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Rename columns
    rename_map_sheet = {
        "SUPPLIER": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á": "Date",
        "MONTH": "Month",
        "QUARTER": "Quarter",
        "YEAR": "Year"
    }
    df = df.rename(columns={c: rename_map_sheet.get(c, c) for c in df.columns})

    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)
        df["MonthKey"] = df["Date"].dt.strftime("%Y-%m")
        df["Month"] = df["Date"].dt.month
        df["Quarter"] = df["Date"].dt.quarter
    elif "Month" in df.columns and "Year" in df.columns:
        df["MonthKey"] = df["Year"].astype(str) + "-" + df["Month"].astype(str).str.zfill(2)

    df["RootCause"] = df["Defect"].apply(map_root_cause)
    df["Advice"] = df["Defect"].apply(advise_for)

    # 1) ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°
    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™", len(df))
    col2.metric("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå", df["SUP"].nunique())
    col3.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", df["Defect"].nunique())

    # 2) ‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/Quarter
    st.subheader("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/Quarter")
    monthly_summary = df.groupby(["MonthKey", "SUP", "Defect"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
    st.dataframe(monthly_summary, hide_index=True)

    # 3) ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£
    st.subheader("üìã ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏")
    defect_grade = df.groupby(["Defect", "Grade", "SUP"]).size().reset_index(name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™")
    st.dataframe(defect_grade, hide_index=True)

    # 4) ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP")

    monthly_sup = (
        df.groupby(["MonthKey", "SUP"])
          .size()
          .reset_index(name="Count")
          .sort_values("MonthKey")
    )

    fig_monthly = px.line(
        monthly_sup,
        x="MonthKey",
        y="Count",
        color="SUP",
        markers=True,
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP"
    )

    fig_monthly.update_layout(
        xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™",
        legend_title="SUP",
        height=500
    )

    st.plotly_chart(fig_monthly, use_container_width=True)
