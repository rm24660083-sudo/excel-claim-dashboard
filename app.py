import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="üìä SUP Dashboard", layout="wide")
st.title("üìä SUP Defect & Grade Analysis Dashboard")

# -----------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô AI Advisor
# -----------------------------
def ai_advisor(df):
    tips = []
    if df.empty:
        return ["‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"]

    latest_q = df["Quarter"].max()
    q_data = df[df["Quarter"] == latest_q]

    # SUP ‡∏ó‡∏µ‡πà defect ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    if "SUP" in q_data.columns:
        sup_counts = q_data["SUP"].value_counts()
        if not sup_counts.empty:
            sup = sup_counts.index[0]
            count = sup_counts.iloc[0]
            tips.append(f"üè≠ SUP {sup} ‡∏°‡∏µ defect {count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô Q{latest_q}")

    # Defect ‡∏ó‡∏µ‡πà recurring
    if "Defect" in q_data.columns:
        defect_counts = q_data["Defect"].value_counts()
        if not defect_counts.empty:
            defect = defect_counts.index[0]
            tips.append(f"üîÅ Defect '{defect}' ‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô Q{latest_q}")

    # Grade ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    if {"Grade","Defect"}.issubset(q_data.columns):
        grade_counts = q_data["Grade"].value_counts()
        if not grade_counts.empty:
            grade = grade_counts.index[0]
            tips.append(f"üì¶ ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏° {grade} ‡∏°‡∏µ defect ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô Q{latest_q}")

    tips.append("‚úÖ ‡∏ó‡∏≥ CAPA (Corrective Action) ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö SUP ‡∏ó‡∏µ‡πà defect ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
    tips.append("üß™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà defect ‡∏™‡∏π‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏´‡∏°‡πà")

    return tips


# -----------------------------
# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
# -----------------------------
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Mapping ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    rename_map = {
        "SUP": "SUP",
        "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå": "SUP",
        "Supplier": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect",
        "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade",
        "Grade": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á": "ShipDate",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å": "IssueDate",
    }
    df = df.rename(columns={c: rename_map.get(c, c) for c in df.columns})

    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if "ShipDate" in df.columns:
        df["ShipDate"] = pd.to_datetime(df["ShipDate"], errors="coerce", dayfirst=True)
        base_col = "ShipDate"
    elif "IssueDate" in df.columns:
        df["IssueDate"] = pd.to_datetime(df["IssueDate"], errors="coerce", dayfirst=True)
        base_col = "IssueDate"
    else:
        base_col = None

    if base_col:
        df["Month"] = df[base_col].dt.month
        df["Quarter"] = df[base_col].dt.quarter

    # -----------------------------
    # Overview
    # -----------------------------
    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô SUP", df["SUP"].nunique())
    with col2:
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Defect ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(df))
    with col3:
        top_sup = df["SUP"].value_counts().idxmax()
        st.metric("SUP ‡∏ó‡∏µ‡πà defect ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", top_sup)

    # -----------------------------
    # Tabs
    # -----------------------------
    tab1, tab2, tab3 = st.tabs(["Defect by SUP", "Grade by SUP", "AI Advisor"])

    # Tab 1: Defect by SUP (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/Quarter)
    with tab1:
        st.markdown("### üîç Defect by SUP (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/Quarter)")
        if {"SUP","Defect","Quarter"}.issubset(df.columns):
            sup_defect = df.groupby(["Quarter","SUP","Defect"]).size().reset_index(name="Count")
            fig1 = px.bar(sup_defect, x="SUP", y="Count", color="Defect",
                          facet_col="Quarter", barmode="stack",
                          title="Defect Breakdown by SUP (Quarterly)")
            st.plotly_chart(fig1, use_container_width=True)
            st.dataframe(sup_defect, hide_index=True)

    # Tab 2: Grade by SUP
    with tab2:
        st.markdown("### üì¶ Grade by SUP (Defect Breakdown)")
        if {"SUP","Grade","Defect"}.issubset(df.columns):
            sup_grade = df.groupby(["SUP","Grade","Defect"]).size().reset_index(name="Count")
            fig2 = px.bar(sup_grade, x="SUP", y="Count", color="Defect",
                          facet_col="Grade", barmode="stack",
                          title="Defect by SUP and Grade")
            st.plotly_chart(fig2, use_container_width=True)
            st.dataframe(sup_grade, hide_index=True)

    # Tab 3: AI Advisor
    with tab3:
        st.markdown("### üß† ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
        tips = ai_advisor(df)
        for t in tips:
            st.write("- " + t)
