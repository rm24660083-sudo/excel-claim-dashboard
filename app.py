# -----------------------------
# üîß Import Libraries
# -----------------------------
import streamlit as st
import pandas as pd
import numpy as np
import os
from io import BytesIO
from fpdf import FPDF
import plotly.express as px

# -----------------------------
# üì§ Export Functions
# -----------------------------
def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="Analysis")
        writer.save()
    return output.getvalue()

def generate_pdf(df):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", ln=True, align="C")
    pdf.ln(10)

    required_cols = ["SUP", "Defect", "Advice"]
    for col in required_cols:
        if col not in df.columns:
            pdf.cell(200, 10, txt=f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{col}'", ln=True)
            return pdf.output(dest="S").encode("latin-1")

    for _, row in df.iterrows():
        sup = str(row.get("SUP", "")).strip()
        defect = str(row.get("Defect", "")).strip()
        advice = str(row.get("Advice", "")).strip()
        line = f"SUP: {sup} | Defect: {defect} | Advice: {advice}"
        pdf.multi_cell(0, 10, txt=line)

    return pdf.output(dest="S").encode("latin-1")

# -----------------------------
# üìä Claim Roll Processor
# -----------------------------
def process_claim_roll(df):
    st.title("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°‡∏°‡πâ‡∏ß‡∏ô")

    rename_map = {
        "SUP": "SUP", "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå": "SUP", "Supplier": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect", "‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á": "Defect", "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade", "Grade": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å": "Date", "Date": "Date", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£": "Date",
        "Lot": "Lot", "Code": "Code", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á": "ShipDate"
    }
    df = df.rename(columns={c: rename_map.get(c, c) for c in df.columns})

    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)
        df["MonthKey"] = df["Date"].dt.strftime("%Y-%m")
        df["Month"] = df["Date"].dt.month
        df["Quarter"] = df["Date"].dt.quarter
    else:
        df["MonthKey"] = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

    def advise_for(defect):
        t = str(defect)
        if "‡∏à‡∏∏‡∏î‡∏î‡∏≥" in t or "‡∏ï‡∏≤‡πÑ‡∏°‡πâ" in t:
            return "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô"
        if "‡∏¢‡∏±‡∏ö" in t or "‡∏°‡πâ‡∏ß‡∏ô" in t:
            return "‡∏ï‡∏£‡∏ß‡∏à tension cut-over ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏û‡πá‡∏Ñ"
        if "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÅ‡∏ï‡∏Å" in t or "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏î‡πà‡∏≤‡∏á" in t:
            return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡πÅ‡∏´‡πâ‡∏á"
        if "Calender" in t:
            return "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á Calender ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏£‡∏á‡∏Å‡∏î"
        return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏∏‡∏î‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡πÉ‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° sampling"

    if "Defect" in df.columns:
        df["Advice"] = df["Defect"].apply(advise_for)

    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", len(df))
    col2.metric("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", df["SUP"].nunique())
    col3.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö", df["Defect"].nunique())

    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP")
    if "MonthKey" in df.columns and "SUP" in df.columns:
        monthly_sup = df.groupby(["MonthKey", "SUP"]).size().reset_index(name="Count")
        fig = px.line(monthly_sup, x="MonthKey", y="Count", color="SUP", markers=True)
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Advisor)")
    advisor_unique = df[["SUP", "Defect", "Advice"]].drop_duplicates()
    st.dataframe(advisor_unique, hide_index=True)

    st.subheader("üì• Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel", to_excel(df), "claim_roll.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF", generate_pdf(df), "claim_roll.pdf", mime="application/pdf")

# -----------------------------
# üìä Claim Sheet Processor
# -----------------------------
def process_claim_sheet(df):
    st.title("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô")

    df = df.rename(columns={
        "SUPPLIER": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect",
        "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": "MONTH"
    })

    def advise_for(defect):
        t = str(defect)
        if "‡∏à‡∏∏‡∏î‡∏î‡∏≥" in t or "‡∏ï‡∏≤‡πÑ‡∏°‡πâ" in t:
            return "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡πà‡∏á‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô"
        if "‡∏¢‡∏±‡∏ö" in t or "‡∏°‡πâ‡∏ß‡∏ô" in t:
            return "‡∏ï‡∏£‡∏ß‡∏à tension cut-over ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏û‡πá‡∏Ñ"
        if "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÅ‡∏ï‡∏Å" in t or "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏î‡πà‡∏≤‡∏á" in t:
            return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡πÅ‡∏´‡πâ‡∏á"
        if "Calender" in t:
            return "‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á Calender ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏£‡∏á‡∏Å‡∏î"
        return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏∏‡∏î‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡πÉ‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° sampling"

    df["Advice"] = df["Defect"].apply(advise_for)

    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", len(df))
    col2.metric("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á", df["SUP"].nunique())
    col3.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö", df["Defect"].nunique())

    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP")
    monthly_sup = df.groupby(["MONTH", "SUP"]).size().reset_index(name="Count")
    fig = px.line(monthly_sup, x="MONTH", y="Count", color="SUP", markers=True)
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Advisor)")
    advisor_unique = df[["SUP", "Defect", "Advice"]].drop_duplicates()
    st.dataframe(advisor_unique, hide_index=True)

    st.subheader("üì• Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel", to_excel(df), "claim_sheet.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    st.download_button("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF", generate_pdf(df), "claim_sheet.pdf", mime="application/pdf")

# -----------------------------
# üöÄ Page Config + Logo
# -----------------------------
st.set_page_config(page_title="üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏Ñ‡∏•‡∏°", layout="wide")

logo_path = os.path.join(os.path.dirname(__file__), "Logo.png")
st.image(logo_path, width=120)
st.markdown(
    """
    <div style="font-size:16px; font-weight:bold; margin-top:5px;">
        Powered by <span style="color:#d62728;">The Beyonder RM</span>
    </div>
    """,
    unsafe_allow_html=True
)

# -----------------------------
# üìÇ File Type Selection + Upload
# -----------------------------
file_type = st.selectbox("üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", ["‡πÄ‡∏Ñ‡∏•‡∏°‡∏°‡πâ‡∏ß‡∏ô", "‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô"])
uploaded_file = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

# -----------------------------
# üß† Process File Based on Type
# -----------------------------
if uploaded_file:
    df = pd.read_excel(uploaded_file)

    if file_type == "‡πÄ‡∏Ñ‡∏•‡∏°‡∏°‡πâ‡∏ß‡∏ô":
        process_claim_roll(df)

    elif file_type == "‡πÄ‡∏Ñ‡∏•‡∏°‡πÅ‡∏ú‡πà‡∏ô":
        process_claim
