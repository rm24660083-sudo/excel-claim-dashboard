import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="üìä SUP Defect & Grade Analysis + AI Advisor", layout="wide")
st.title("üìä SUP Defect & Grade Analysis + AI Advisor")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô AI Advisor (Advance)
def advanced_ai_advisor(df):
    tips = []
    if df.empty:
        return ["‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"]

    latest_q = df["Quarter"].max()
    q_data = df[df["Quarter"] == latest_q]

    # SUP ‡∏ó‡∏µ‡πà‡∏°‡∏µ defect ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    if "SUP" in q_data.columns:
        sup_counts = q_data["SUP"].value_counts()
        if not sup_counts.empty:
            top_sup = sup_counts.index[0]
            top_count = sup_counts.iloc[0]
            tips.append(f"üè≠ SUP {top_sup} ‡∏°‡∏µ defect {top_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô Q{latest_q} ‚Äî ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î")

    # Defect ‡∏ó‡∏µ‡πà recurring
    if "Defect" in q_data.columns:
        defect_counts = q_data["Defect"].value_counts()
        if not defect_counts.empty:
            top_defect = defect_counts.index[0]
            tips.append(f"üîÅ Defect '{top_defect}' ‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô Q{latest_q} ‚Äî ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")

    # ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    if {"Grade","Defect"}.issubset(q_data.columns):
        grade_defect = q_data.groupby("Grade")["Defect"].count().sort_values(ascending=False)
        if not grade_defect.empty:
            top_grade = grade_defect.index[0]
            tips.append(f"üì¶ ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏° {top_grade} ‡∏°‡∏µ defect ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô Q{latest_q} ‚Äî ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö/‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï")

    # ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    if "Month" in df.columns:
        next_month = df["Month"].max() + 1
        tips.append(f"üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {next_month}) ‡∏Ñ‡∏ß‡∏£‡πÇ‡∏ü‡∏Å‡∏±‡∏™ SUP ‡πÅ‡∏•‡∏∞ defect ‡∏ó‡∏µ‡πà recurring ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©")

    # ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    tips.append("‚úÖ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≥ CAPA (Corrective Action) ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö SUP ‡∏ó‡∏µ‡πà‡∏°‡∏µ defect ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
    tips.append("üß™ ‡∏Ñ‡∏ß‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ defect ‡∏™‡∏π‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏´‡∏°‡πà")

    return tips


# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # --- Mapping ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ---
    rename_map = {
        "SUP": "SUP",
        "‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå": "SUP",
        "Supplier": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect",
        "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade",
        "Grade": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á": "ShipDate",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å": "IssueDate",
    }
    df = df.rename(columns={c: rename_map.get(c, c) for c in df.columns})

    # --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ---
    if "ShipDate" in df.columns:
        df["ShipDate"] = pd.to_datetime(df["ShipDate"], errors="coerce", dayfirst=True)
        base_col = "ShipDate"
    elif "IssueDate" in df.columns:
        df["IssueDate"] = pd.to_datetime(df["IssueDate"], errors="coerce", dayfirst=True)
        base_col = "IssueDate"
    else:
        base_col = None

    if base_col:
        df["Month"] = df[base_col].dt.month
        df["Quarter"] = df[base_col].dt.quarter

    # --- 1. SUP ‚Üí Defect ---
    st.subheader("üîç ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ SUP")
    if {"SUP","Defect"}.issubset(df.columns):
        sup_defect = df.groupby(["SUP","Defect"]).size().reset_index(name="Count")
        st.dataframe(sup_defect)
        fig = px.bar(sup_defect, x="SUP", y="Count", color="Defect",
                     title="Defect Breakdown by SUP", barmode="stack")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå SUP ‡∏´‡∏£‡∏∑‡∏≠ Defect")

    # --- 2. SUP ‚Üí Quarter ---
    st.subheader("üìÖ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏≤‡∏¢‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™")
    if {"SUP","Quarter"}.issubset(df.columns):
        sup_quarter = df.groupby(["Quarter","SUP"]).size().reset_index(name="Count")
        st.dataframe(sup_quarter)
        fig2 = px.bar(sup_quarter, x="Quarter", y="Count", color="SUP",
                      title="Defect Count by Quarter", barmode="group")
        st.plotly_chart(fig2, use_container_width=True)

    # --- 3. SUP ‚Üí Grade ---
    st.subheader("üì¶ ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ SUP")
    if {"SUP","Grade"}.issubset(df.columns):
        sup_grade = df.groupby(["SUP","Grade"]).size().reset_index(name="Count")
        st.dataframe(sup_grade)
        fig3 = px.bar(sup_grade, x="SUP", y="Count", color="Grade",
                      title="Defect by SUP and Grade", barmode="stack")
        st.plotly_chart(fig3, use_container_width=True)

    # --- 4. AI Advisor ---
    st.subheader("üß† AI Advisor (Advance)")
    if "Quarter" in df.columns:
        tips = advanced_ai_advisor(df)
        for t in tips:
            st.write("- " + t)
    else:
        st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Quarter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå AI Advisor")
