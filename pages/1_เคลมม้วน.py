import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import re

st.title("üìë ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏Ñ‡∏•‡∏°‡∏°‡πâ‡∏ß‡∏ô")

# -----------------------------
# Utility Functions
# -----------------------------
root_cause_rules = [
    (r"carl?ender|‡∏Ñ‡∏≤‡πÄ‡∏•‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏Ñ‡∏≤‡∏£‡πå‡πÄ‡∏•‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå|‡∏à‡∏∏‡∏î‡∏î‡∏≥", "‡∏£‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡∏£‡∏µ‡∏î/‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤"),
    (r"‡∏¢‡∏±‡∏ö|‡∏£‡∏≠‡∏¢‡∏¢‡∏±‡∏ö|‡∏°‡πâ‡∏ß‡∏ô‡∏´‡∏¢‡πà‡∏≠‡∏ô", "Tension/‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠-‡∏Ç‡∏ô‡∏™‡πà‡∏á"),
    (r"‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô|‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô", "‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏î/‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Å‡∏•‡∏¥‡πâ‡∏á"),
]

def map_root_cause(defect_text):
    if not defect_text or pd.isna(defect_text):
        return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    for pattern, cause in root_cause_rules:
        if re.search(pattern, str(defect_text), flags=re.IGNORECASE):
            return cause
    return "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ/‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

def advise_for(defect):
    t = str(defect)
    if re.search(r"‡∏™‡∏±‡∏ô‡∏ô‡∏π‡∏ô|‡∏£‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô", t, re.I):
        return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö slitting/‡πÉ‡∏ö‡∏°‡∏µ‡∏î ‡πÅ‡∏•‡∏∞ tension"
    return "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï"

# -----------------------------
# Upload File
# -----------------------------
uploaded_file = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel (‡πÄ‡∏Ñ‡∏•‡∏°‡∏°‡πâ‡∏ß‡∏ô)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Rename columns
    rename_map = {
        "SUP": "SUP", "Supplier": "SUP",
        "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î": "Defect", "‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á": "Defect",
        "‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏Å‡∏£‡∏°": "Grade", "Grade": "Grade",
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å": "Date", "Date": "Date"
    }
    df = df.rename(columns={c: rename_map.get(c, c) for c in df.columns})

    if "Date" in df.columns:
        df["Date"] = pd.to_datetime(df["Date"], errors="coerce", dayfirst=True)
        df["MonthKey"] = df["Date"].dt.strftime("%Y-%m")
        df["Month"] = df["Date"].dt.month
        df["Quarter"] = df["Date"].dt.quarter

    df["RootCause"] = df["Defect"].apply(map_root_cause)
    df["Advice"] = df["Defect"].apply(advise_for)

    # KPI
    st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°")
    col1, col2, col3 = st.columns(3)
    col1.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", len(df))
    col2.metric("‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå", df["SUP"].nunique())
    col3.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á", df["Defect"].nunique())

    # ‡∏Å‡∏£‡∏≤‡∏ü SUP
    st.subheader("üè≠ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö SUP (Top 12)")
    sup_count = df.groupby("SUP").size().reset_index(name="Count").sort_values("Count", ascending=False).head(12)
    fig1 = px.bar(sup_count, x="SUP", y="Count", text="Count")
    st.plotly_chart(fig1, use_container_width=True)

    # ‡∏Å‡∏£‡∏≤‡∏ü Defect
    st.subheader("üß© ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á (Top 12)")
    defect_count = df.groupby("Defect").size().reset_index(name="Count").sort_values("Count", ascending=False).head(12)
    fig2 = px.pie(defect_count, names="Defect", values="Count")
    st.plotly_chart(fig2, use_container_width=True)

    # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏™) ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° SUP")
    monthly_sup = df.groupby(["MonthKey", "SUP"]).size().reset_index(name="Count")
    fig3 = px.line(monthly_sup, x="MonthKey", y="Count", color="SUP", markers=True)
    st.plotly_chart(fig3, use_container_width=True)

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    st.subheader("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    advisor_unique = df[["SUP", "Defect", "Advice"]].drop_duplicates()
    st.dataframe(advisor_unique, hide_index=True)
